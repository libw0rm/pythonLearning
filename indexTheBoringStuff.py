# Python 3.11
# –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–£–¢–ò–ù–ù–´–• –ó–ê–î–ê–ß –° –ü–û–ú–û–©–¨–Æ PYTHON. 2-–ï –ò–ó–î–ê–ù–ò–ï
# AUTOMATE THE BORING STUFF WITH PYTHON. 2ND EDITION

# !–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
# [ATBF_n]   - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç AUTOMATE THE BORING STUFF + –Ω–æ–º–µ—Ä(–∞) —Å—Ç—Ä–∞–Ω–∏—Ü(—ã), –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞ üß¨
# (n)        - –ø—Ä–æ—Å—Ç–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏ üìç
# [!n.n]     - –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è üë©üèª‚Äçüéì
# {Training} - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä, –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ü§Ø
# [.TROUBLE] - –Ω–µ—Ä–µ—à—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ üíÄ
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–º–∏—Ç–∞: # [ATBF_n]:[–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞]. #
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_0]: –æ–ø–∏—Å–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ñ–∞–π–ª–∞.
# –î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è underscore ( _ )
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_32]: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 32.
# –î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–∏—Å/hypen ( - )
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_32-34]: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü 32-34.
#
#


# #  (52) "–í–∞—à–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
# print('Hello World!\n')
# #
# print('What is your name?')
# myName = input()
# print('Nice to meet you, ' + myName, '\n')
# print('The length your name is: ')
# print(len(myName), ' letters', '\n')
# #
# print('How old are you?')
# myAge = input()
# print('In a year you will be ' + str(int(myAge) + 1) + ' old', '\n')


# # {Training_70}
# userName = input("Enter your name: ")
# if userName == "Darkness":
#     print("Hello, " + userName + "! My old friend üßå")
# elif userName != "Darkness":
#     print("üßü Nobody's Home")
# else:
#     print("Go away! I do not know you!")


# # {Training_76}
# inputName = input('Enter name: ') #Carol, Alice
# inputAge = int(input('Enter age: ')) #11, 12

# if inputName == 'Alice':
#     print("Hi, Alice.")
# elif inputAge < 12:
#     print("You're not Alice, kiddo")
# else:
#     print("You're neither Alice nor a little kid.")

    
# # {Training_80}
# userName = ''
# while userName != 'your name':
#     print("Please type your name: ")
#     userName = input()
# else:
#     print("Thank you!")


# # [ATBF_81] –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è break
# while True: #—Å–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞, —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ–≥–¥–∞ True
#     userName = input("Please type your name: ")
#     if userName == 'your name':
#         break
# print("Thank you")


# # {Training_81}
# userName = ''
# while True:
#     print("Please type your name: ")
#     userName = input()
#     if userName == 'your name':
#         break
# print("Thank you!")


# # [ATBF_83] Swordfish
# while True:
#     # userName = input("How are you? ") # –í–≤–æ–¥ –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
#     print("How are you?")
#     userName = input()
#     if userName != "Joe": 
#         continue #–ï—Å–ª–∏ –Ω–µ "Joe", —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ 1 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
#     print("Hello, Joe. What is the password? (It is a fish.)")
#     userPassword = input()
#     if userPassword == "swordfish":
#         break
# print("Access granted.")


# # [ATBF_85] Boolean
# print(bool(0.0))        #False
# print(bool(0))          #False
# print(bool(''))         #False
# print(bool(""))         #False
# print(bool(-1))         #True
# print(bool(1))          #True
# print(bool(True))       #True
# print(bool(False))      #False
# print(bool(not False))  #True
# print(bool(not 0))      #True
# print(bool(not ''))     #True


# # [ATBF_85] 
# userName = ''
# while not userName:
#     print("Enter your name: ")
#     userName = input()
# print("How many guests will there be?")
# numOfGuest = int(input())
# if numOfGuest:
#     print("OK! Goodlike!")
# print("I go to the sleep")


# # [ATBF_86] fiveTimes
# print("My name is")
# for i in range(5):
#     print("Jimmy Five Times (" + str(i) + ")") #–ù—É–º–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Å (0)
#     # print("Jimmy Five Times (" + str(i+1) + ")") #–ù—É–º–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Å (1)


# # [ATBF_87] 5050
# total = 0
# for i in range(101):
#     total = total + i
# print(total)


# # # [ATBF_88] fiveTimes (While)
# print("My name is")
# i = 0
# while i < 5:
#     # i = i + 1 # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å (1)
#     print("Jimmy Five Times (" + str(i) + ")")
#     i = i + 1 # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å (0)


# # {Training_88-89} range()
# for i in range(0, 1000, 100):
#     # print(i, i**2)
#     print(i, i**2, i**3, i**4)


# # [ATBF_90] random
# import random
# for i in range(5):
#     print(random.random())
#     # print(random.randint(1,20))
#     # print(random.randbytes(23))

# # randomBytes = random.randbytes(23)
# # print(type(randomBytes))

# # [ATBF_91] exitExample
# import sys

# while True:
#     print('Enter \'exit\' for exit')
#     response = input()
#     if response == 'exit':
#         print('DONE. BYE!')
#         sys.exit()


# # [ATBF_92] –ò–≥—Ä–∞ "guessTheNumber"
# import random

# secretNumber = random.randint(1, 100)
# print('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100') 
# # print(secretNumber) # cheatcode üòã

# for guessesTaken in range(1, 7): # –ò–≥—Ä–æ–∫—É –¥–∞—ë—Ç—Å—è 6 –ø–æ–ø—ã—Ç–æ–∫
#     print('‚õ≥Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–æ–º–µ—Ä: ' + str(guessesTaken)) # –û—Ç–æ–±—Ä–∞–∂—ë–Ω —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
#     print('–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ')
#     guess = int(input())

#     if guess < secretNumber:
#         print('>>> –ú–∞–ª–æ\n')
#     elif guess > secretNumber:
#         print('>>> –ú–Ω–æ–≥–æ\n')
#     else:
#         break
# if guess == secretNumber:
#     print('–û—Ç–ª–∏—á–Ω–æ! –ß–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ –∑–∞ ' + str(guessesTaken) + ' –ø–æ–ø—ã—Ç–æ–∫!')
# else:
#     print('–¢–∞-–¥–∞–∞–∞–º! –í—Å—ë, –∫–æ—Ç–ª–µ—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–æ—Å—Ç—ë—Ä üòà –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ' + str(secretNumber))


# # [ATBF_94] –ò–≥—Ä–∞ RPC Game
# import random, sys

# print('–ö–ê–ú–ï–ù–¨, –ù–û–ñ–ù–ò–¶–´, –ë–£–ú–ê–ì–ê')

# wins = 0    # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–±–µ–¥—ã 
# losses = 0  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
# ties = 0    # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∏—á—å–∏—Ö

#     # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
# while True:
#     print('%s wins, %s losses, %s ties\n' % (wins, losses, ties))
    
#     # –¶–∏–∫–ª –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ 
#     while True:
#         print('–í—ã–±–µ—Ä–∏ —Ö–æ–¥: (–∫)–∞–º–µ–Ω—å, (–Ω)–æ–∂–Ω–∏—Ü—ã, (–±)—É–º–∞–≥–∞ –∏–ª–∏ ' + \
#                 '(–≤)—ã—Ö–æ–¥')
#         playerMove = input()
#         if playerMove == '–≤':
#             sys.exit() # –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
#         if playerMove == '–∫' \
#         or playerMove == '–Ω' \
#         or playerMove == '–±':
#             break # –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤–≤–æ–¥–∞
#         print('–í–≤–µ–¥–∏ "–∫", "–Ω", "–±", "–≤"')
    
#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
#     if playerMove == '–∫':
#         print('–ö–ê–ú–ï–ù–¨ –∏ ...')
#     if playerMove == '–Ω':
#         print('–ù–û–ñ–ù–ò–¶–´ –∏ ...')
#     if playerMove == '–±':
#         print('–ë–£–ú–ê–ì–ê –∏ ...')

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
#     randomNumber = random.randint(1, 3)
#     if randomNumber == 1:
#         computerMove = '–∫'
#         print('üóø –ö–ê–ú–ï–ù–¨')
#     if randomNumber == 2:
#         computerMove = '–Ω'
#         print('‚úÇÔ∏è –ù–û–ñ–ù–ò–¶–´')
#     if randomNumber == 3:
#         computerMove = '–±'
#         print('üßª –ë–£–ú–ê–ì–ê')
    
#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     if playerMove == computerMove:
#         print('ü§ù –ù–∏—á—å—è!')
#         ties = ties + 1
#     elif playerMove == '–∫' and computerMove == '–Ω':
#         print('ü•≥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–±' and computerMove == '–∫':
#         print('ü§© –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–Ω' and computerMove == '–±':
#         print('ü§™ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–∫' and computerMove == '–±':
#         print('üò≥ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1
#     elif playerMove == '–±' and computerMove == '–Ω':
#         print('üëª –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1
#     elif playerMove == '–Ω' and computerMove == '–∫':
#         print('üò± –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1

        
# # {Training_98-99}
# # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 4
# print(bool((5 > 4) and (3 == 5)), ': (5 > 4) and (3 == 5)')
# print(bool(not (5 > 4)), ': not (5 > 4)')
# print(bool((5 > 4) or (3 == 5)), ': (5 > 4) or (3 == 5)')
# print(bool(not ((5 > 4) or (3 == 5))), ': not ((5 > 4) or (3 == 5))')
# print(bool((True and True) and (True == False)), ': (True and True) and (True == False)')
# print(bool((not False) or (not True)), ': (not False) or (not True)')
# print(bool(True and False))
# print(bool(True or False))


# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 9
# import sys
# 
# while True:
#     spam = input('Enter number or "e": ')
#     if spam == 'e':
#         # sys.exit()
#         exit() # –≤—ã—Ö–æ–¥ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
#     if spam == "1":
#         print("Hello")
#     elif spam == "2":
#         print("Howdy")
#     else:
#         print("Greetings!")
#     # break # –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã

# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 12-13
# for i in range (10):
#     print(i)
# for i in range (0, 10):
#     print(i)
# for i in range (0, 10, 1):
#     print(i)

# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 13
# i = 1
# while i <= 10:
#     print(i)
#     i += 1

# # [ATBF_102] helloFunc
# def hello():
#     print('Hello!')
#     print('Hello!!!')
#     print('Hello my friends!')

# hello()
# hello()
# hello()
# # 
# def hello(userName):
#     print('Hello, ' + userName)

# hello('Vicky')
# hello('Cristina')
# hello('Barcelona')


# # [ATBF_105] magic8Ball
# import random

# def getAnswer(answerNumber):
#     if answerNumber == 1:
#         return 'It is certain'
#     elif answerNumber == 2:
#         return 'It is decidedly so'
#     elif answerNumber == 3:
#         return 'Yes'
#     elif answerNumber == 4:
#         return 'Reply hazy try again'
#     elif answerNumber == 5:
#         return 'Ask again later'
#     elif answerNumber == 6:
#         return 'Concentrate and ask again'
#     elif answerNumber == 7:
#         return 'My reply is no'
#     elif answerNumber == 8:
#         return 'Outlook not so good'
#     elif answerNumber == 9:
#         return 'Very doubtful'

# shuffleNumbers = random.randint(1, 9)
# fortune = getAnswer(shuffleNumbers)
# print(fortune)
# # print(getAnswer(shuffleNumbers))
# # print(getAnswer(random.randint(1, 9)))

# # # {Training_106}
# # spamOne = 'hello form spamOne'
# # spamTwo = print('hello from spamTwo')
# # spamTwo # –≤—ã–≤–æ–¥ –±–µ–∑ None
# # print(spamTwo) # –≤—ã–≤–æ–¥ —Å None
# # print(bool(None == spamTwo)) # True
# # print(bool(None == spamOne)) # False


# {Training_107}
# import random

# rVar = random.randint(1, 10) # Random from 1 to 10
# # rVar = random.randint(10, 1) # Error
# print(rVar)

# print('Hello', end=' ')
# print('World')
# print('World_1', 'World_2', 'World_3', sep=', ')
# print('S1n', 'S2n', 'S3n', sep='\n')
# print('Tab1', 'Tab2', 'Tab3', sep='\t') 
# print('CR1', 'CR2', 'CR3', sep='\r') 
# # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ [print] —Å –ø–æ–º–æ—â—å—é [\r], –Ω–∞ –≤—ã—Ö–æ–¥–µ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ [CR3]
# print('CR4', 'CR5', 'CR6', sep='\r\n') 
# # —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞


# # [ATBF_109] abcdCallStack
# def a():
#     print('a() starts')
#     b()
#     d()
#     print('a() returns')


# def b():
#     print('b() starts')
#     c()
#     print('b() returns')

# def c():
#     print('c() starts')
#     print('c() returns')

# def d():
#     print('d() starts')
#     print('d() returns')

# a()


# {Training_112-113}
# def spam():
#     eggs = 99
#     bacon()
#     print(eggs)

# def bacon():
#     ham = 101
#     eggs = 0

# spam()
# # bacon()


# def spam():
#     print(eggs)
# eggs = 42
# spam()
# print(eggs)


# def spam():
#     eggs = 'spam local'
#     print(eggs)     # spam local

# def bacon():
#     eggs = 'bacon local'
#     print(eggs)     # 1. bacon local
#     spam()          # 2. spam local
#     print(eggs)     # 3. bacon local

# eggs = 'global'     # 4. global
# bacon()
# print(eggs)

# def spam():
#     global eggs
#     eggs = 'spam'
#     # print(eggs)
# eggs = 'global'
# # spam()
# print(eggs)

# # LOCAL
# def firstLocalFunction():
#     numOne, numTwo, numThree = '1', '2', '3'
#     print('üëª local output_first: ' + numOne, numTwo, numThree)

# firstLocalFunction()

# def secondLocalFunction():
#     numOne, numTwo, numThree = 'a', 'b', 'c'
#     print('üëª local output_second: ' + numOne, numTwo, numThree, '\n')
# secondLocalFunction()
# # # print('local: ' + numOne, end=' ')
# # # print('local: ' + numTwo, end=' ')
# # # print('local: ' + numThree)  

# # GLOBAL

# numOne, numTwo, numThree = 'C++', 'Python', 'Assembler'

# def firstGlobalFunction():
#     global numOne, numTwo, numThree
#     # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
#     # numOne, numTwo, numThree = 'a', 'b', 'c'
#     print('üéÉ global output_first: ' + numOne, numTwo, numThree)

# firstGlobalFunction()
# print('fG: ' + numOne, end=' ')
# print('fG: ' + numTwo, end=' ')
# print('fG: ' + numThree, '\n')

# # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# numOne, numTwo, numThree = 'prod', 'beta', 'alpha'

# def secondGlobalFunction():
#     global numOne, numTwo, numThree
#     print('üêô global output_second: ' + numOne, numTwo, numThree)

# secondGlobalFunction()
# print('sG: ' + numOne, end=' ')
# print('sG: ' + numTwo, end=' ')
# print('sG: ' + numThree)


# # [ATBF_117-119] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
# def spam(divideBy):
#     return 42 / divideBy
# 
# # –ù–∏–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏
# 
# def spam(divideBy):
#     try: # –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ —Å–ª—É—á–∏—Ç—Å—è –æ—à–∏–±–∫–∞, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ [except]
#         return 42 / divideBy
#     except ZeroDivisionError: # –∑–¥–µ—Å—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–ª–æ–∫–µ [try]
#         print('Error: Invalid argument. ‚ò†Ô∏è')


# print(spam(2))
# print(spam(12))
# print(spam(0))
# print(spam(1))

# # –í—ã–¥–µ–ª–∏–º [try-except] –∏ –ø–æ–º–µ—Å—Ç–∏–º —Ç—É–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ [print]
# def spam(divideBy):
#     return 42 / divideBy

# try:
#     print(spam(2))
#     print(spam(12))
#     print(spam(0))
#     print(spam(1)) # –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–∫ –ø–æ—Å–ª–µ [except] –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ [try]
# except ZeroDivisionError:
#     print('Error: Invalid argument. ‚ò†Ô∏è')


# [ATBF_120] ZigZag
import time, sys

indent = 0                  # –∫–æ–ª-–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
indentIncreasing = True     # –∫–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ —É–º–µ–º—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞

try:
    while True: # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        print(' ' * indent, end='')
        print('********')
        time.sleep(0.1) # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –≤ 0.1s (1/10)

        if indentIncreasing:
            indent += 1
            if indent == 10:
                indentIncreasing = False
        else:
            indent -= 1
            if indent == 0:
                indentIncreasing = True
except KeyboardInterrupt:
    sys.exit()


