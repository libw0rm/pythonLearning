# Python 3.11
# –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–£–¢–ò–ù–ù–´–• –ó–ê–î–ê–ß –° –ü–û–ú–û–©–¨–Æ PYTHON. 2-–ï –ò–ó–î–ê–ù–ò–ï
# AUTOMATE THE BORING STUFF WITH PYTHON. 2ND EDITION

# !–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
# [ATBF_n]   - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç AUTOMATE THE BORING STUFF + –Ω–æ–º–µ—Ä(–∞) —Å—Ç—Ä–∞–Ω–∏—Ü(—ã), –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞ üß¨
# (n)        - –ø—Ä–æ—Å—Ç–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏ üìç
# [!n.n]     - –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è üë©üèª‚Äçüéì
# {Training} - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä, –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ü§Ø
# [.TROUBLE] - –Ω–µ—Ä–µ—à—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ üíÄ
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–º–∏—Ç–∞: # [ATBF_n]:[–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞]. #
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_0]: –æ–ø–∏—Å–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ñ–∞–π–ª–∞.
# –î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è underscore ( _ )
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_32]: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 32.
# –î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–∏—Å/hypen ( - )
# –ù–∞–ø—Ä–∏–º–µ—Ä: [ATBF_32-34]: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü 32-34.
#
#


# #  (52) "–í–∞—à–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
# print('Hello World!\n')
# #
# print('What is your name?')
# myName = input()
# print('Nice to meet you, ' + myName, '\n')
# print('The length your name is: ')
# print(len(myName), ' letters', '\n')
# #
# print('How old are you?')
# myAge = input()
# print('In a year you will be ' + str(int(myAge) + 1) + ' old', '\n')


# # {Training_70}
# userName = input("Enter your name: ")
# if userName == "Darkness":
#     print("Hello, " + userName + "! My old friend üßå")
# elif userName != "Darkness":
#     print("üßü Nobody's Home")
# else:
#     print("Go away! I do not know you!")


# # {Training_76}
# inputName = input('Enter name: ') #Carol, Alice
# inputAge = int(input('Enter age: ')) #11, 12

# if inputName == 'Alice':
#     print("Hi, Alice.")
# elif inputAge < 12:
#     print("You're not Alice, kiddo")
# else:
#     print("You're neither Alice nor a little kid.")


# # {Training_80}
# userName = ''
# while userName != 'your name':
#     print("Please type your name: ")
#     userName = input()
# else:
#     print("Thank you!")


# # [ATBF_81] –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è break
# while True: #—Å–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞, —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ–≥–¥–∞ True
#     userName = input("Please type your name: ")
#     if userName == 'your name':
#         break
# print("Thank you")


# # {Training_81}
# userName = ''
# while True:
#     print("Please type your name: ")
#     userName = input()
#     if userName == 'your name':
#         break
# print("Thank you!")


# # [ATBF_83] Swordfish
# while True:
#     # userName = input("How are you? ") # –í–≤–æ–¥ –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
#     print("How are you?")
#     userName = input()
#     if userName != "Joe": 
#         continue #–ï—Å–ª–∏ –Ω–µ "Joe", —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ 1 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
#     print("Hello, Joe. What is the password? (It is a fish.)")
#     userPassword = input()
#     if userPassword == "swordfish":
#         break
# print("Access granted.")


# # [ATBF_85] Boolean
# print(bool(0.0))        #False
# print(bool(0))          #False
# print(bool(''))         #False
# print(bool(""))         #False
# print(bool(-1))         #True
# print(bool(1))          #True
# print(bool(True))       #True
# print(bool(False))      #False
# print(bool(not False))  #True
# print(bool(not 0))      #True
# print(bool(not ''))     #True


# # [ATBF_85] 
# userName = ''
# while not userName:
#     print("Enter your name: ")
#     userName = input()
# print("How many guests will there be?")
# numOfGuest = int(input())
# if numOfGuest:
#     print("OK! Goodlike!")
# print("I go to the sleep")


# # [ATBF_86] fiveTimes
# print("My name is")
# for i in range(5):
#     print("Jimmy Five Times (" + str(i) + ")") #–ù—É–º–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Å (0)
#     # print("Jimmy Five Times (" + str(i+1) + ")") #–ù—É–º–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Å (1)


# # [ATBF_87] 5050
# total = 0
# for i in range(101):
#     total = total + i
# print(total)


# # # [ATBF_88] fiveTimes (While)
# print("My name is")
# i = 0
# while i < 5:
#     # i = i + 1 # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å (1)
#     print("Jimmy Five Times (" + str(i) + ")")
#     i = i + 1 # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å (0)


# # {Training_88-89} range()
# for i in range(0, 1000, 100):
#     # print(i, i**2)
#     print(i, i**2, i**3, i**4)


# # [ATBF_90] random
# import random
# for i in range(5):
#     print(random.random())
#     # print(random.randint(1,20))
#     # print(random.randbytes(23))

# # randomBytes = random.randbytes(23)
# # print(type(randomBytes))

# # [ATBF_91] exitExample
# import sys

# while True:
#     print('Enter \'exit\' for exit')
#     response = input()
#     if response == 'exit':
#         print('DONE. BYE!')
#         sys.exit()


# # [ATBF_92] –ò–≥—Ä–∞ "guessTheNumber"
# import random

# secretNumber = random.randint(1, 100)
# print('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100') 
# # print(secretNumber) # cheatcode üòã

# for guessesTaken in range(1, 7): # –ò–≥—Ä–æ–∫—É –¥–∞—ë—Ç—Å—è 6 –ø–æ–ø—ã—Ç–æ–∫
#     print('‚õ≥Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–æ–º–µ—Ä: ' + str(guessesTaken)) # –û—Ç–æ–±—Ä–∞–∂—ë–Ω —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
#     print('–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ')
#     guess = int(input())

#     if guess < secretNumber:
#         print('>>> –ú–∞–ª–æ\n')
#     elif guess > secretNumber:
#         print('>>> –ú–Ω–æ–≥–æ\n')
#     else:
#         break
# if guess == secretNumber:
#     print('–û—Ç–ª–∏—á–Ω–æ! –ß–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ –∑–∞ ' + str(guessesTaken) + ' –ø–æ–ø—ã—Ç–æ–∫!')
# else:
#     print('–¢–∞-–¥–∞–∞–∞–º! –í—Å—ë, –∫–æ—Ç–ª–µ—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–æ—Å—Ç—ë—Ä üòà –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ' + str(secretNumber))


# # [ATBF_94] –ò–≥—Ä–∞ RPC Game
# import random, sys

# print('–ö–ê–ú–ï–ù–¨, –ù–û–ñ–ù–ò–¶–´, –ë–£–ú–ê–ì–ê')

# wins = 0    # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–±–µ–¥—ã 
# losses = 0  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
# ties = 0    # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∏—á—å–∏—Ö

#     # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
# while True:
#     print('%s wins, %s losses, %s ties\n' % (wins, losses, ties))

#     # –¶–∏–∫–ª –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ 
#     while True:
#         print('–í—ã–±–µ—Ä–∏ —Ö–æ–¥: (–∫)–∞–º–µ–Ω—å, (–Ω)–æ–∂–Ω–∏—Ü—ã, (–±)—É–º–∞–≥–∞ –∏–ª–∏ ' + \
#                 '(–≤)—ã—Ö–æ–¥')
#         playerMove = input()
#         if playerMove == '–≤':
#             sys.exit() # –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
#         if playerMove == '–∫' \
#         or playerMove == '–Ω' \
#         or playerMove == '–±':
#             break # –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤–≤–æ–¥–∞
#         print('–í–≤–µ–¥–∏ "–∫", "–Ω", "–±", "–≤"')

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
#     if playerMove == '–∫':
#         print('–ö–ê–ú–ï–ù–¨ –∏ ...')
#     if playerMove == '–Ω':
#         print('–ù–û–ñ–ù–ò–¶–´ –∏ ...')
#     if playerMove == '–±':
#         print('–ë–£–ú–ê–ì–ê –∏ ...')

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
#     randomNumber = random.randint(1, 3)
#     if randomNumber == 1:
#         computerMove = '–∫'
#         print('üóø –ö–ê–ú–ï–ù–¨')
#     if randomNumber == 2:
#         computerMove = '–Ω'
#         print('‚úÇÔ∏è –ù–û–ñ–ù–ò–¶–´')
#     if randomNumber == 3:
#         computerMove = '–±'
#         print('üßª –ë–£–ú–ê–ì–ê')

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     if playerMove == computerMove:
#         print('ü§ù –ù–∏—á—å—è!')
#         ties = ties + 1
#     elif playerMove == '–∫' and computerMove == '–Ω':
#         print('ü•≥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–±' and computerMove == '–∫':
#         print('ü§© –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–Ω' and computerMove == '–±':
#         print('ü§™ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
#         wins = wins + 1
#     elif playerMove == '–∫' and computerMove == '–±':
#         print('üò≥ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1
#     elif playerMove == '–±' and computerMove == '–Ω':
#         print('üëª –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1
#     elif playerMove == '–Ω' and computerMove == '–∫':
#         print('üò± –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
#         losses = losses + 1


# # {Training_98-99}
# # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 4
# print(bool((5 > 4) and (3 == 5)), ': (5 > 4) and (3 == 5)')
# print(bool(not (5 > 4)), ': not (5 > 4)')
# print(bool((5 > 4) or (3 == 5)), ': (5 > 4) or (3 == 5)')
# print(bool(not ((5 > 4) or (3 == 5))), ': not ((5 > 4) or (3 == 5))')
# print(bool((True and True) and (True == False)), ': (True and True) and (True == False)')
# print(bool((not False) or (not True)), ': (not False) or (not True)')
# print(bool(True and False))
# print(bool(True or False))


# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 9
# import sys
# 
# while True:
#     spam = input('Enter number or "e": ')
#     if spam == 'e':
#         # sys.exit()
#         exit() # –≤—ã—Ö–æ–¥ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
#     if spam == "1":
#         print("Hello")
#     elif spam == "2":
#         print("Howdy")
#     else:
#         print("Greetings!")
#     # break # –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã

# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 12-13
# for i in range (10):
#     print(i)
# for i in range (0, 10):
#     print(i)
# for i in range (0, 10, 1):
#     print(i)

# # üëΩ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–¥–∞–Ω–∏–µ 13
# i = 1
# while i <= 10:
#     print(i)
#     i += 1

# # [ATBF_102] helloFunc
# def hello():
#     print('Hello!')
#     print('Hello!!!')
#     print('Hello my friends!')

# hello()
# hello()
# hello()
# # 
# def hello(userName):
#     print('Hello, ' + userName)

# hello('Vicky')
# hello('Cristina')
# hello('Barcelona')


# # [ATBF_105] magic8Ball
# import random

# def getAnswer(answerNumber):
#     if answerNumber == 1:
#         return 'It is certain'
#     elif answerNumber == 2:
#         return 'It is decidedly so'
#     elif answerNumber == 3:
#         return 'Yes'
#     elif answerNumber == 4:
#         return 'Reply hazy try again'
#     elif answerNumber == 5:
#         return 'Ask again later'
#     elif answerNumber == 6:
#         return 'Concentrate and ask again'
#     elif answerNumber == 7:
#         return 'My reply is no'
#     elif answerNumber == 8:
#         return 'Outlook not so good'
#     elif answerNumber == 9:
#         return 'Very doubtful'

# shuffleNumbers = random.randint(1, 9)
# fortune = getAnswer(shuffleNumbers)
# print(fortune)
# # print(getAnswer(shuffleNumbers))
# # print(getAnswer(random.randint(1, 9)))

# # # {Training_106}
# # spamOne = 'hello form spamOne'
# # spamTwo = print('hello from spamTwo')
# # spamTwo # –≤—ã–≤–æ–¥ –±–µ–∑ None
# # print(spamTwo) # –≤—ã–≤–æ–¥ —Å None
# # print(bool(None == spamTwo)) # True
# # print(bool(None == spamOne)) # False


# {Training_107}
# import random

# rVar = random.randint(1, 10) # Random from 1 to 10
# # rVar = random.randint(10, 1) # Error
# print(rVar)

# print('Hello', end=' ')
# print('World')
# print('World_1', 'World_2', 'World_3', sep=', ')
# print('S1n', 'S2n', 'S3n', sep='\n')
# print('Tab1', 'Tab2', 'Tab3', sep='\t') 
# print('CR1', 'CR2', 'CR3', sep='\r') 
# # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ [print] —Å –ø–æ–º–æ—â—å—é [\r], –Ω–∞ –≤—ã—Ö–æ–¥–µ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ [CR3]
# print('CR4', 'CR5', 'CR6', sep='\r\n') 
# # —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞


# # [ATBF_109] abcdCallStack
# def a():
#     print('a() starts')
#     b()
#     d()
#     print('a() returns')


# def b():
#     print('b() starts')
#     c()
#     print('b() returns')

# def c():
#     print('c() starts')
#     print('c() returns')

# def d():
#     print('d() starts')
#     print('d() returns')

# a()


# {Training_112-113}
# def spam():
#     eggs = 99
#     bacon()
#     print(eggs)

# def bacon():
#     ham = 101
#     eggs = 0

# spam()
# # bacon()


# def spam():
#     print(eggs)
# eggs = 42
# spam()
# print(eggs)


# def spam():
#     eggs = 'spam local'
#     print(eggs)     # spam local

# def bacon():
#     eggs = 'bacon local'
#     print(eggs)     # 1. bacon local
#     spam()          # 2. spam local
#     print(eggs)     # 3. bacon local

# eggs = 'global'     # 4. global
# bacon()
# print(eggs)

# def spam():
#     global eggs
#     eggs = 'spam'
#     # print(eggs)
# eggs = 'global'
# # spam()
# print(eggs)

# # LOCAL
# def firstLocalFunction():
#     numOne, numTwo, numThree = '1', '2', '3'
#     print('üëª local output_first: ' + numOne, numTwo, numThree)

# firstLocalFunction()

# def secondLocalFunction():
#     numOne, numTwo, numThree = 'a', 'b', 'c'
#     print('üëª local output_second: ' + numOne, numTwo, numThree, '\n')
# secondLocalFunction()
# # # print('local: ' + numOne, end=' ')
# # # print('local: ' + numTwo, end=' ')
# # # print('local: ' + numThree)  

# # GLOBAL

# numOne, numTwo, numThree = 'C++', 'Python', 'Assembler'

# def firstGlobalFunction():
#     global numOne, numTwo, numThree
#     # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
#     # numOne, numTwo, numThree = 'a', 'b', 'c'
#     print('üéÉ global output_first: ' + numOne, numTwo, numThree)

# firstGlobalFunction()
# print('fG: ' + numOne, end=' ')
# print('fG: ' + numTwo, end=' ')
# print('fG: ' + numThree, '\n')

# # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# numOne, numTwo, numThree = 'prod', 'beta', 'alpha'

# def secondGlobalFunction():
#     global numOne, numTwo, numThree
#     print('üêô global output_second: ' + numOne, numTwo, numThree)

# secondGlobalFunction()
# print('sG: ' + numOne, end=' ')
# print('sG: ' + numTwo, end=' ')
# print('sG: ' + numThree)


# # [ATBF_117-119] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
# def spam(divideBy):
#     return 42 / divideBy
# 
# # –ù–∏–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏
# 
# def spam(divideBy):
#     try: # –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ —Å–ª—É—á–∏—Ç—Å—è –æ—à–∏–±–∫–∞, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ [except]
#         return 42 / divideBy
#     except ZeroDivisionError: # –∑–¥–µ—Å—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–ª–æ–∫–µ [try]
#         print('Error: Invalid argument. ‚ò†Ô∏è')


# print(spam(2))
# print(spam(12))
# print(spam(0))
# print(spam(1))

# # –í—ã–¥–µ–ª–∏–º [try-except] –∏ –ø–æ–º–µ—Å—Ç–∏–º —Ç—É–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ [print]
# def spam(divideBy):
#     return 42 / divideBy

# try:
#     print(spam(2))
#     print(spam(12))
#     print(spam(0))
#     print(spam(1)) # –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–∫ –ø–æ—Å–ª–µ [except] –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ [try]
# except ZeroDivisionError:
#     print('Error: Invalid argument. ‚ò†Ô∏è')


# # [ATBF_120] ZigZag
# import time, sys

# indent = 0                  # –∫–æ–ª-–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
# indentIncreasing = True     # –∫–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ —É–º–µ–º—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞

# try:
#     while True: # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
#         print(' ' * indent, end='')
#         print('********')
#         time.sleep(0.1) # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –≤ 0.1s (1/10)

#         if indentIncreasing:
#             indent += 1
#             if indent == 10:
#                 indentIncreasing = False
#         else:
#             indent -= 1
#             if indent == 0:
#                 indentIncreasing = True
# except KeyboardInterrupt:
#     sys.exit()

# {Training_122-123} –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

''''''
# def collatz(number):

#     if number % 2 == 0:
#         return (number // 2)  # –µ—Å–ª–∏ n –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [n//2]

#     else:
#         return (3 * number + 1)  # –µ—Å–ª–∏ n –Ω–µ –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [3n+1]

# collatz(3)  #10
# collatz(10) #5
# collatz(5)  #16
# collatz(16) #8
# collatz(8)  #4
# collatz(4)  #2
# collatz(2)  #1
# collatz(1)  #4


# def collatz(number):

#     if number % 2 == 0:
#         return (number // 2)  # –µ—Å–ª–∏ n –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [n//2]

#     else:
#         return (3 * number + 1)  # –µ—Å–ª–∏ n –Ω–µ –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [3n+1]


# userInputInteger = int(input('Enter number: '))
# i = userInputInteger
# magicInput = collatz(userInputInteger)

# while True:
#     if i == 1:
#         break
#     magicInput = i
#     print(i)
#     i = collatz(i)


# # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ö–æ–ª–ª–∞—Ç—Ü–∞
# # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# def collatz(number): 

#     if number % 2 == 0: 
#         return (number // 2)    # –µ—Å–ª–∏ n –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [n//2]

#     else: 
#         return (3 * number + 1) # –µ—Å–ª–∏ n –Ω–µ –∫—Ä–∞—Ç–Ω–æ–µ 2, —Ç–æ [3n+1]

# try:  # —á–µ–∫–∞–µ–º —Ç—Ä–∞–±–ª—ã ValueError or TypeError
#     i = int(input('Enter number: '))
#     j = 0       # —Å—á—ë—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π, just for fun
#     sum = 0     # —Å—á—ë—Ç—á–∏–∫ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º, just for fun

#     while i != 1:
#         i = collatz(i)
#         j += 1
#         sum += i
#         print('Step:' + str(j) + '> ' + str(i))
#     print('total sum:' + str(sum))

# except ValueError or TypeError:
#     print('Enter even number from 1 to...')


# [ATBF_126] –°–ø–∏—Å–∫–∏
# {Training}

''' –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å—Ä–µ–∑–∞ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
animalListAU = ['quokka', 'capybara', 'wombat', 'qoull']
animalListRU = ['viper', 'bear', 'wolf', 'crane']
animalListCA = ['beaver', 'linx', 'bison', 'puffin']
animalListSumm = [animalListAU, animalListRU, animalListCA]

print(animalListSumm[0])              # animalListAU
print(animalListSumm)                 # all lists
print(animalListSumm[1])              # animalListRU
print(animalListSumm[2])              # animalListCA
print(animalListSumm[0][2])           # wombat
print(animalListSumm[1][2])           # wolf
print(animalListSumm[2][2])           # bison
print(animalListSumm[2][2][1])        # b[i]son
print(animalListSumm[2][2][-4])       # b[i]son
print(animalListSumm[2][2][1:])       # b[ison]
print(animalListSumm[2][2][-4:])      # b[ison]
print(animalListSumm[2][2][-5:])      # [bison]
print(animalListSumm[2][2][-2:])      # bis[on]
print(animalListSumm[2][2][0:-1])     # [biso]n
print(animalListSumm[2][2][-4:-1])    # b[iso]n
print(animalListSumm[2][2][-4])       # b[i]son
print(animalListSumm[0][0:2])         # quokka, capybara
print(animalListSumm[0][-1:])         # quoll
print(animalListSumm[0][0:-2])        # quokka, capybara
print(animalListSumm[0][-2])          # wombat
print(animalListSumm[0][-2:])         # wombat, quoll
print(animalListSumm[0][-2:-1])       # wombat
print(animalListSumm[0][:])           # == list[0]
print('Hello, ' + animalListSumm[0][2])

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞
print(len(animalListAU)) # 4 –∏–Ω–¥–µ–∫—Å–∞
print(len(animalListSumm)) # 3 –∏–Ω–¥–µ–∫—Å–∞ 
print(len(animalListSumm[0])) # 4 –∏–Ω–¥–µ–∫—Å–∞ 
# '''

''' –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–µ–∫—Å–æ–≤
animalListAU = ['quokka', 'capybara', 'wombat', 'qoull']
animalListRU = ['viper', 'bear', 'wolf', 'crane']
animalListCA = ['beaver', 'linx', 'bison', 'puffin']
animalListSumm = [animalListAU, animalListRU, animalListCA]

animalListAU[0] = 'parrot'
animalListRU[0] = 'tiger'
animalListCA[0] = 'snake'

print(animalListAU)
print(animalListRU)
print(animalListCA)
# '''

''' 
numberListOne = [1, 2, 3]
numberListTwo = [3, 4, 5]
numberListSumm = [numberListOne, numberListTwo]

print(numberListSumm[0][2] * 2) # (3*2)
print(numberListSumm[1][1] + numberListSumm[0][1]) # 4+2
print(numberListOne, numberListTwo) # –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–æ–≤
print(numberListOne[2]*2, numberListTwo[2]*2) # 6, 10
# '''

''' –ë—É–ª–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∫–∏
boolListNum = [1,2,3]
boolListStr = ['a','b','c']
boolListBool = [True, False, False]
boolListFalse = [False, False, False]
boolListTrue = [True, True, True]
boolListNone = [None, None, None]

print(bool(boolListNum))
print(bool(boolListStr))
print(bool(boolListBool[0]))
print(bool(boolListFalse[0]))
print(bool(boolListTrue[0]))
print(bool(boolListNone))
# '''

''' –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
changeListNumber = [1, 2, 3]
print(changeListNumber)  # [1, 2, 3]

changeListNumber[:] = [0, 1, 2]
print(changeListNumber)  # [0, 1, 2]
# '''

'''
concatListStrOne = ['a', 'b', 'c']
concatListStrTwo = ['d', 'e', 'f']
concatListIntOne = [1, 2, 3]
concatListIntTwo = [4, 5, 6]

listStrStr = concatListStrOne + concatListStrTwo
listStrInt = concatListStrOne + concatListIntOne
listIntInt = concatListIntOne + concatListIntTwo

print(listStrStr)
print(listStrInt)
print(listIntInt)

# '''

''' –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é {del}
delListStr = ['a', 'b', 'c']
delListInt = [1, 2, 3, 4]
print(delListInt)

del delListInt[-1]
print('–£–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º (4): ', delListInt)

del delListStr[0]
print('–£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1): ', delListInt)
# '''

''' –ø—Ä–æ–≥—Ä–∞–º–º–∞ allMyCats

catNames = []
while True:
    print('Enter the name of cat ' + str(len(catNames) + 1) + ' or (<Enter> for exit)')
    name = input()
    if name == '':
        break
    catNames = catNames + [name]
print('–ò–º–µ–Ω–∞ –∫–æ—à–∞—Å—Ç–∏–∫–æ–≤:')
for name in catNames:
    print(' ' + name)
# '''

''' —Ü–∏–∫–ª for —Å–æ —Å–ø–∏—Å–∫–∞–º–∏

for i in range(3):
    print(i)

for i in [4, 5, 6]:
    print(i)

for i in ['a', 'b', 'c']:
    print(i)
# '''

'''
animalListAU = ['quokka', 'capybara', 'wombat', 'qoull']
for i in range(len(animalListAU)):
    print('Index ' + str(i) + ': ', animalListAU[i])
# '''

''' –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã in –∏ not in
listInt = [1, 2, 3, 4]
print(1 in listInt)         # True
print('1' in listInt)       # False
print('1' not in listInt)   # True
# '''

''' My Pets
myPets = ['Sofy', 'Piter', 'Fatty']
print('Enter name: ')
inputName = input()
if inputName not in myPets:
    print('WAT? How?')
else:
    print(inputName + ' is my pet')
# '''

''' –ì—Ä—É–ø–æ–≤–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
cat = ['fatty', 'grey', 'loud']
# size = cat[0]
# color = cat[1]
# disposition = cat[2]

size, color, disposition = cat
print(size, color, disposition)
# '''

''' –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ enumerate()
animalListAU = ['quokka', 'capybara', 'wombat', 'qoull']
for index, item in enumerate(animalListAU):
    print('Index', str(index) + ':',  item)

# '''

''' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ random.choice
import random
animalList = ['quokka', 'capybara', 'wombat', 'qoull', 'beaver', 'linx', 'bison', 'puffin', 'bear', 'tiger']
# print(random.choice(animalList))

for i in range(0, 10):
    print(random.choice(animalList))

# '''

''' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ random.shuffle
import random

animalList = ['quokka', 'capybara', 'wombat', 'qoull',
            'beaver', 'linx', 'bison', 'puffin', 'bear','tiger']
print(random.shuffle(animalList)) # None, —É–¥–∞–ª–µ–Ω–æ –∏–∑ Python 3.11
print(random.choice(animalList))
print(random.choices(animalList))
# '''

# ''' ‚ò†Ô∏è WARNING! This is Generator for 100.000.000 32b str
# import random

# a = 10000000000000000000000000000000
# b = 99999999999999999999999999999999
# i = 0

# while i <= 100000000:
#     print(random.randint(a, b))
#     i += 1

# '''


''' –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
spamNum = 13

# spamNum += 1 # 14
# spamNum -= 1 # 12
# spamNum *= 1 # 13
# spamNum /= 1 # 13.0
# spamNum %= 1 # 0

print(spamNum)
# '''

''' 
# –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è [+] —Å—Ç—Ä–æ–∫ –∏ —Å–ø–∏—Å–∫–æ–≤
spamStr = 'Hello '
spamStr += 'World'

print(spamStr)

# —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è [*] —Å—Ç—Ä–æ–∫ –∏ —Å–ø–∏—Å–∫–æ–≤
piggy = ['Babel']
piggy *= 3  # ['Babel', 'Babel', 'Babel']

print(piggy)
# '''

''' [ATBF_135-140] –ú–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤
# –º–µ—Ç–æ–¥ index()
helloList = ['hello', 'greetings', 'hi',  'howdy', 'bonjour']

print(helloList.index('hi')) # 2
# '''

''' –º–µ—Ç–æ–¥—ã append() –∏  insert()
addList = ['cat', 'dog']
print(addList)  # ['cat', 'dog']
addList.append('mouse')
print(addList)  # ['cat', 'dog', 'mouse']
addList.insert(0, 'kitty')
print(addList)  # ['kitty', 'cat', 'dog', 'mouse']
# append() –∏  insert() –≤ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏
# addList = addList.insert(0, 'kitty')
# print(addList)  # None
# '''

''' –º–µ—Ç–æ–¥—ã remove() –∏ del
addList.remove('kitty') # LIST.remove('value') —É–¥–∞–ª—è–µ—Ç –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
print('remove() kitty', addList)    # ['cat', 'dog', 'mouse']
addList.append('kitty')
print('append() kitty', addList)    # ['cat', 'dog', 'mouse']
del addList[3] # del LIST[i] —É–¥–∞–ª—è–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
print('del[] kitty', addList)       # ['cat', 'dog', 'mouse']
# '''

''' # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é sort()
sortCharList = ['d', 'c', 'b', 'a']
sortNumberList = [9, 6, 3, 1]
sortNumberList.sort(reverse=True)
sortNumberList.sort()
print(sortNumberList)
# print(sortCharList.sort()) # None

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
s2 = "hello"
print(sorted(s2))                 # ['e', 'h', 'l', 'l', 'o']
print(sorted(s2, reverse=True))   # ['o', 'l', 'l', 'h', 'e']

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞
l1 = [1, 4, 5, 2, 456, 12]
print(sorted(l1))                 # [1, 2, 4, 5, 12, 456]
print(sorted(l1, reverse=True))   # [456, 12, 5, 4, 2, 1]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
t1 = (15, 3, 5, 7, 9, 11, 42)
print(sorted(t1))                 # [3, 5, 7, 9, 11, 15, 42]
print(sorted(t1, reverse=True))   # [42, 15, 11, 9, 7, 5, 3]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
t2 = [(1, 2), (11, 12), (0, 2), (3, 2)]
print(sorted(t2))                 # [(0, 2), (1, 2), (3, 2), (11, 12)]
print(sorted(t2, reverse=True))   # [(11, 12), (3, 2), (1, 2), (0, 2)]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
s1 = {1, 4, 3, 6, 2, 8, 11, 32}
print(sorted(s1))                 # [1, 2, 3, 4, 6, 8, 11, 32]
print(sorted(s1, reverse=True))   # [32, 11, 8, 6, 4, 3, 2, 1]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è
d1 = {2: 'red', 1: 'green', 3: 'blue'}
# –í–µ—Ä–Ω–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
print(sorted(d1))   # [1, 2, 3]

# –í–µ—Ä–Ω–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print(sorted(d1.values()))   # ['blue', 'green', 'red']

# –í–µ—Ä–Ω–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–ª—é—á–∞–º.
print(sorted(d1.items()))   # [(1, 'green'), (2, 'red'), (3, 'blue')]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
print(sorted(d1, reverse=True))            # [3, 2, 1]
print(sorted(d1.values(), reverse=True))   # ['red', 'green', 'blue']
# [(3, 'blue'), (2, 'red'), (1, 'green')]
print(sorted(d1.items(), reverse=True))

vegetables = ['squash', 'pea', 'carrot', 'potato']
new_list = sorted(vegetables)
# new_list = ['carrot', 'pea', 'potato', 'squash']
print(new_list)
# vegetables = ['squash', 'pea', 'carrot', 'potato']
print(vegetables)

vegetables.sort()
# vegetables = ['carrot', 'pea', 'potato', 'squash']
print(vegetables)
# '''

'''
# –∏–Ω–≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é reversed()
integersStringList = ['1', '2', '3', '4']
integersList = [1, 2, 3, 4]

integersStringList.reverse()
integersList.reverse()

print(integersStringList)           # ['4', '3', '2', '1']
print(integersList)                 # [4, 3, 2, 1]
print(integersStringList.reverse()) # None
# '''

''' [ATBF_142] –≤–µ—Ä—Å–∏—è Magic-8-Ball —Å–æ —Å–ø–∏—Å–∫–æ–º
import random


magicBallMessages = [
    'It is certain',  \
    'It is decidedly so', \
    'Yes', \
    'Reply hazy try again', \
    'Ask again later', \
    'Concentrate and ask again', \
    'My reply is no', \
    'Outlook not so good', \
    'Very doubtful'
    ]

fortune = magicBallMessages[random.randint(0, len(magicBallMessages)-1)]

print(fortune)
# '''

''' [ATBF_143] —Å–ø–∏—Å–∫–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
nameString = 'Socrates'
print(nameString[0]) # S
print(nameString[0:3]) # Soc
print('So' in nameString) # True
print('so' in nameString) # True
print('do' in nameString) # False
print('do' in nameString or 'so' in nameString) # False
for i in nameString:
    print(str.upper('-*- ' + i + ' -*-'))
# '''

''' [ATBF_144] –∏–∑–º–µ–Ω—è–µ–º—ã–µ –∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
# kittyName = 'Kittify'
# kittyName[4] = 'this is'
# print(kittyName)  # TypeError

eggs = [1, 2, 3]
eggs = [4, 5, 6]

print(eggs)  # [4, 5, 6]

del eggs[2]
eggs.append(7)
print(eggs)  # [4, 5, 7]
del eggs[1]
eggs.append(8)
print(eggs)  # [4, 7, 8]
del eggs[0]
eggs.append(9)
print(eggs)  # [7, 8, 9]


print('–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ [:] –∏–ª–∏ [0:] –∏–ª–∏ [0:3]')
del eggs[:]   # –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω [0:3], –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
print(eggs)     # []

print('–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "eggs" —Å –ø–æ–º–æ—â—å—é del')
del eggs
print(eggs)  # NameError: name 'eggs' is not defined
# '''

''' –ö–æ—Ä—Ç–µ–∂–∏ / Python Tuples

firstTuple = ('hi', 42, 0.05)
print(firstTuple[:])

try:
    firstTuple[2] = 0.5     # –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å –∫–æ—Ä—Ç–µ–∂–∞
    print(firstTuple[:])    # TypeError
except TypeError:
    print('TypeError in firstTuple')

typeTestTuple = ('hello')
print(type(('hello',)))  # <class 'tuple'>
print(type(('hello')))   # <class 'str'>
# '''

''' [ATBF_147] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å –ø–æ–º–æ—â—å—é list() –∏ tuple()
listVeg = ['squash', 'pea', 'carrot', 'potato']
tupleBerry = ('strawberry', 'blueberry', 'cranberry')

# –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
tempTuple = tuple(listVeg)
tempList = list(tupleBerry)

# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ 
print(tuple(listVeg))       # list to tuple
print(list(tupleBerry))     # tuple to list

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
print(type(tempList))       # <class 'list'>
print(type(tempTuple))      # <class 'tuple'>

# –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
print(list(tupleBerry[1]))  # ['b', 'l', 'u', 'e', 'b', 'e', 'r', 'r', 'y']
print(tuple(listVeg[0]))    # ('s', 'q', 'u', 'a', 's', 'h')
# '''

''' [ATBF_148] –°—Å—ã–ª–∫–∏
spam = 42 # spam —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 42
cheese = spam # cheese –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ spam, —Ç–æ –µ—Å—Ç—å 42
spam = 100 # –∑–Ω–∞—á–µ–Ω–∏–µ spam –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 100, cheese –Ω–µ –∏–∑–º–µ–Ω—ë–Ω
print('Spam:', spam) # 100
print('Cheese:', cheese) # 42
# '''

''' [ATBF_148]
# —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ [0, 1, 2, 3, 4, 5] –∏ –∑–∞–ø–∏—à–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ –≤ spam
spam = [0, 1, 2, 3, 4, 5]

# c–∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏–∑ spam –≤ cheese
cheese = spam
# —Ç–µ–ø–µ—Ä—å spam –∏ cheese —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ 1 —Å–ø–∏—Å–æ–∫ - [0, 1, 2, 3, 4, 5]

# –∏–∑–º–µ–Ω–µ–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç [1] –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
cheese[1] = 'Ooops!'

# –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –≤–Ω—É—Ç—Ä–∏
print(spam) 
print(cheese)
print(id(spam), '< id —Å–ø–∏—Å–∫–∞ –≤ spam') 
print(id(cheese), '< id —Å–ø–∏—Å–∫–∞ –≤ cheese')
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è cheese —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫
# '''

''' [ATBF_148] —Ç–æ–∂–¥–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ id –≤ Python
testIdListOne = ['a', 'b', 'c']
testIdListTwo = ['a', 'b', 'c']
idTestListOneFirst = id(testIdListOne)
print(id(testIdListOne), '< id testIdListOne')  # —Ä–∞–∑–Ω—ã–µ id
print(id(testIdListTwo), '< id testIdListTwo', '\n')  # —Ä–∞–∑–Ω—ã–µ id

# –¥–æ–±–∞–≤–∏–º –≤ testIdListOne –∑–Ω–∞—á–µ–Ω–∏–µ 'd'
# append() –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–ø–∏—Å–∫–∞, –æ–Ω –∏–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
testIdListOne.append('d')
print(id(testIdListOne), testIdListOne,
      '< id testIdListOne')  # id –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
print(id(testIdListTwo), testIdListTwo,
      "< id testIdListTwo", '\n')

# –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ testIdListOne —Å —Ç–µ–º –∂–µ –Ω–∞–±–æ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–π
testIdListOne = ['a', 'b', 'c', 'd']
idTestListOneSecond = id(testIdListOne)

print('–°—Ä–∞–≤–Ω–∏–º id-–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ testIdListOne: ',
      idTestListOneFirst, idTestListOneSecond,
      bool(idTestListOneFirst == idTestListOneSecond), sep='\n')
# '''

''' [ATBF_151] –ü–µ—Ä–µ–¥–∞—á–∞ —Å—Å—ã–ª–æ–∫
def passingReference(someParameter):
    someParameter.append('Hello')

# —Å–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫
linkList = [1, 2, 3]
print(id(linkList), linkList)

# –ø–µ—Ä–µ–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ passingReference –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
# –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é linkList, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è passingReference
# —Å—Ç–∞–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
passingReference(linkList)  # linkList - –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ pR

print(id(linkList), linkList) # –ø–æ—Å–º–æ—Ç—Ä–∏–º id –∏ –≤—ã–≤–æ–¥
# '''

''' [ATBF_152] –§—É–Ω–∫—Ü–∏–∏ copy() –∏ deepcopy()
# copy() –ø–æ–∑–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, 
# —Ç–∞–∫–æ–≥–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—é —Å—Å—ã–ª–∫–∏
# deepcopy() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
import copy


firstListCopy = ['A', 'B', 'C', 'D']
print(id(firstListCopy), '< id firstListCopy')

secondyListCopy = copy.copy(firstListCopy)
print(id(secondyListCopy), '< id secondyListCopy')

secondyListCopy[1] = 42
print(id(firstListCopy), firstListCopy)
print(id(secondyListCopy), secondyListCopy)
# '''

''' [ATBF_154-155] –ò–≥—Ä–∞ "–ñ–∏–∑–Ω—å"
import random, time, copy
WIDTH = 100
HEIGHT = 40

# –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∫–ª–µ—Ç–æ–∫
nextCells = []
for x in range(WIDTH):
    column = [] # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    for y in range(HEIGHT):
        if random.randint(0, 1) == 0:
            column.append('#') # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ–π –∫–µ—Ç–∫–∏
        else:
            column.append(' ') # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–π –∫–ª–µ—Ç–∫–∏
    nextCells.append(column) # nextCells —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
    i = 0

while True:
    # print('\n\n\n\n\n') # –æ—Ç–¥–µ–ª–∏–º –∫–∞–∂–¥—ã–π —à–∞–≥ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    currentCells = copy.deepcopy(nextCells)
    i += 1

    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω
    for y in range(HEIGHT):
        for x in range(WIDTH):
            print(currentCells[x][y], end='') # –≤—ã–≤–æ–¥ —Ä–µ—à—ë—Ç–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞
        print()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–µ—Ç–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    for x in range(WIDTH):
        for y in range(HEIGHT):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
        # –í—ã—Ä–∞–∂–µ–Ω–∏–µ '% WIDTH' –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        # leftCoord –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É 0 –∏ WIDTH - 1
            leftCoord  = (x - 1) % WIDTH
            rightCoord = (x + 1) % WIDTH
            aboveCoord = (y - 1) % HEIGHT
            belowCoord = (y + 1) % HEIGHT

            # print('X-left:', leftCoord, 'X-right:', rightCoord)
            # print('Y-above:', aboveCoord, 'Y-below:', belowCoord, '\n')
        
            numNeighbors = 0
            if currentCells[leftCoord][aboveCoord] == '#':
                numNeighbors += 1 # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É
            if currentCells[x][aboveCoord] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–≤–µ—Ä—Ö—É
            if currentCells[rightCoord][aboveCoord] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É
            if currentCells[leftCoord][y] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞
            if currentCells[rightCoord][y] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞
            if currentCells[leftCoord][belowCoord] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ª–µ–≤–∞ —Å–Ω–∏–∑—É
            if currentCells[x][belowCoord] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
            if currentCells[rightCoord][belowCoord] == '#':
                numNeighbors += 1  # –∂–∏–≤–∞ –∫–ª–µ—Ç–∫–∞ —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
            if currentCells[x][y] == '#' and (numNeighbors == 2 or 
                                                numNeighbors == 3):
                # –ñ–∏–≤—ã–µ –∫–ª–µ—Ç–∫–∏ —Å 2 –∏–ª–∏ 3 —Å–æ—Å–µ–¥—è–º–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∂–∏–≤—ã–º–∏
                nextCells[x][y] = '#'
            elif currentCells[x][y] == ' ' and numNeighbors == 3:
                # –ú—ë—Ä—Ç–≤—ã–µ –∫–ª–µ—Ç–∫–∏ —Å 3 –∂–∏–≤—ã–º–∏ —Å–æ—Å–µ–¥—è–º –æ–∂–∏–≤–∞—é—Ç
                nextCells[x][y] = '#'
            else:
                # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–º–∏—Ä–∞—é—Ç –∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –º–µ—Ä—Ç–≤—ã–º–∏
                nextCells[x][y] = ' '
    print(i)
    time.sleep(0.005)
# '''

''' [ATBF_159] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
# {Training}
# (159) –ó–∞–¥–∞–Ω–∏–µ 2
spam = [2, 4, 6, 8, 10]
spam[2] = 'hello'
spam

# (159) –ó–∞–¥–∞–Ω–∏—è 3, 4, 5
spam = ['–∞', 'b', '—Å', 'f', 'd']
spam[int('3' * 2) // 11]
# '3' * 2 = '33' => int('33') // 11 == [3]
spam[-1]  # 'd'
spam[:2]  # ['–∞', 'b']

# (159) –ó–∞–¥–∞–Ω–∏—è 6, 7, 8
bacon = [3.14, 'cat', 11, 'cat', True]
print(bacon.index('cat')) # [1]
bacon.append(99) # –∑–Ω–∞—á–µ–Ω–∏–µ (99) –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
print(bacon) # [3.14, 'cat', 11, 'cat', True, 99]
bacon.remove('cat') # –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ [1]
print(bacon, '\n')

# (159) –ó–∞–¥–∞–Ω–∏–µ 9
foo = 'bar'
bar = 'foo'
print('–ö–æ–Ω–∫–∞—Ç–∞–Ω–∞—Ü–∏—è: bar + foo > ', bar + foo)  # foobar
print('–†–µ–ø–ª–∏–∫–∞—Ü–∏—è: bar * foo > ', ((bar + foo) * 2), '\n')  # foobarfoobar

# (159) –ó–∞–¥–∞–Ω–∏–µ 10. –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ append() insert()?
foo = ['f', 'o']
bar = ['b', 'a']
foo.append('0') # append() –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
bar.insert(2, 'r') # insert() –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
print(foo, 'append() –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞')
print(bar, 'insert() –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º')

# (159) –ó–∞–¥–∞–Ω–∏–µ 11. –î–≤–∞ —Å–ø–æ—Å–æ–±–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–æ–≤
foo.remove('0') # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
del bar[2] # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
print(foo)  # ['f', 'o']
print(bar)  # ['b', 'a']

# (159) –ó–∞–¥–∞–Ω–∏—è 14, 15. 
# 14. –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 42? 
# 15. –ö–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ä—Ç–µ–∂? –ö–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ø–∏—Å–æ–∫?
foo = (42,) # –∫–æ—Ä—Ç–µ–∂ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
bar = [42] # —Å–ø–∏—Å–æ–∫
print('Type foo: ', type(foo)) # <class 'tuple'>
print('Type bar: ', type(bar)) # <class 'list'>

print('\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ—Ä—Ç–µ–∂ –∏ –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ø–∏—Å–æ–∫')
print('Type foo: ', type(list(foo))) # <class 'list'>
print('Type bar: ', type(tuple(bar))) # <class 'tuple'>
# '''

''' üíÄ [.TROUBLE] –û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞
import random

customerInput = int(input('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º? \n'))
outputList = []
countObverse = 0
countReverse = 0

for i in range(customerInput):
    if random.randint(0, 1) == 0:
        outputList.append('P')
        countReverse += 1
    else:
        outputList.append('O')
        countObverse += 1
    i += 1

print('–û—Ä–ª–æ–≤ –≤—ã–ø–∞–ª–æ: ', countObverse, '\n''–†–µ—à–µ–∫ –≤—ã–ø–∞–ª–æ: ', countReverse)
# print(outputList)
# '''

''' [ATBF_164] –°–ª–æ–≤–∞—Ä–∏
myCatDict = {'size': 'fat',
             'color': 'gray',
             'disposition': 'loud'
             }
print(myCatDict['size'])

numTestDict = {12345: 'PassOne', 42: 'Answer'}
print(numTestDict[42])

# —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
print(myCatDict == numTestDict)  # False

eggs = {
    'name': 'Sophie',
    'species': 'cat',
    'age': '8'}

ham = {
    'species': 'cat',
    'age': '8',
    'name': 'Sophie'}
print(eggs == ham)  # True
print(ham['name']) # Sofie
# '''

''' [ATBF_165] –°–ª–æ–≤–∞—Ä—å "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"
birthdays = {
    'Alice' : 'Apr 1',
    'Bob'   : 'Dec 12',
    'Carol' : 'Mar 4',
    'Macy'  : 'Sep 17',
}

while True:
    print("Enter name (<Enter> for exit): ")
    input_name = input().capitalize()
    if input_name == '':
        break
    
    if input_name in birthdays:
        print(input_name + ' is the birthday of ' + birthdays[input_name], '\n')
    else:
        print('I do not have birthday information for ' + input_name)
        print('What is their birthday?')
        bday = input()
        birthdays[input_name] = bday
        print('Birthday db updated')
# '''

''' [ATBF_166] –ú–µ—Ç–æ–¥—ã keys(), values(), items()
birthdays = {
    'Alice': 'Apr 1',
    'Bob': 'Dec 12',
    'Carol': 'Mar 4',
    'Macy': 'Sep 17',
    # 'Alice': 'Alice' # —Å—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
}

# for v in birthdays.keys():
#     print('–í—ã–≤–æ–¥ dict_keys:', v)
# for v in birthdays.values():
#     print('–í—ã–≤–æ–¥ dict_values', v)
# for v in birthdays.items():
#     print('–í—ã–≤–æ–¥ dict_items', v)

# # –ø—Ä–æ–≤–µ—Ä–∏–º –∫–ª–∞—Å—Å—ã
# checkForKeys = birthdays.keys()
# checkForValues = birthdays.values()
# checkForItems = birthdays.items()
# print() # –æ—Ç–¥–µ–ª–∏–º –≤—ã–≤–æ–¥ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞
# print(type(checkForKeys))   # <class 'dict_keys'>
# print(checkForKeys, '\n')  
# print(type(checkForValues)) # <class 'dict_values'>
# print(checkForValues, '\n')
# print(type(checkForItems))  # <class 'dict_items'>
# print(checkForItems, '\n')

# # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ list –∏ tuple
# transferList = list(checkForItems)
# transferTuple = tuple(checkForItems)
# print('–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∏–ø —É list(dict): ', type(transferList))
# print('–ü–æ—Å–º–æ—Ç—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: ', transferList, '\n') # –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ø–∏—Å–∫–µ

# print('–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∏–ø —É tuple(dict): ', type(transferTuple)) 
# print('–ü–æ—Å–º–æ—Ç—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: ', transferTuple, '\n')  # –∫–æ—Ä—Ç–µ–∂ –≤ –∫–æ—Ä—Ç–µ–∂–µ

# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–æ–≤
list_keys_bday = list(birthdays.keys())   # list
list_values_bday = list(birthdays.values()) # list
list_items_bday = list(birthdays.items())  # tuple in list

# # "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º" –≤ —Å–ø–∏—Å–æ–∫
# print(list_keys_bday) # names
# print(list_values_bday) # birthday date
# print(list_items_bday) # tuple in list with names and date

# –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–ª—é—á–∞ —É —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
print("Check 'Alice' in list_keys_bday:", 'Alice' in list_keys_bday)    
# True, –µ—Å—Ç—å –∫–ª—é—á 'Alice'
print("Check 'Alice' in list_values_bday:", 'Alice' in list_values_bday)  
# False, –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è 'Alice'
print("Check 'Alice' in list_items_bday:", 'Alice' in list_items_bday)   
# False, —Ç–∫ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å –∫–æ—Ä—Ç–µ–∂–µ–º, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –≥–¥–µ –∏—â–µ–º
print("Check 'Alice' in list_items_bday with [0]:", 'Alice' in list_items_bday[0]) 
# True
# 
# —Å–ø—Ä–æ—Å–∏–º –±–µ–∑ –º–µ—Ç–æ–¥–æ–≤, –µ—Å—Ç—å –ª–∏ 'Alice' –≤ —Å–ª–æ–≤–∞—Ä–µ
print("Check 'Alice' in birthdays:", 'Alice' in birthdays)  
# True, –µ—Å—Ç—å –∫–ª—é—á 'Alice' –≤ —Å–ª–æ–≤–∞—Ä–µ
# '''

''' [ATBF_169] –ú–µ—Ç–æ–¥ get()
picnitItems = {'apple' : 5, 'cup' : 2}
print('–Ø –Ω–µ—Å—É', str(picnitItems.get('cup', 0)), '—á–∞—à–∫–∏')
print('–Ø –Ω–µ—Å—É', str(picnitItems.get('egg', 0)), '—è–π—Ü–∞')
# '''

''' [ATBF_169] –ú–µ—Ç–æ–¥ setdefault()
spam = {
    'name' : 'Piter',
    'age' : 5,
    }
# –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç 'color':'black'
if 'color' not in spam:
    spam['color'] = 'black'
# –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç 'food':'broccoli'
spam.setdefault('food', 'broccoli')
# –∑–∞–º–µ–Ω–∏–º 'food':'broccoli' –Ω–∞ 'food':'burger'
spam.setdefault('food', 'burger') 
# ü•¶ –ü–µ—Ç—è –Ω–µ –±—É–¥–µ—Ç –∂–º—è–∫–∞—Ç—å –±—É—Ä–≥–µ—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–ª—é—á 'food' –∑–∞–Ω—è—Ç –±—Ä–æ–∫–∫–æ–ª—è—à–∫–∞–º–∏
print(spam)
# '''

''' [ATBF_170] character count
import pprint
message = 'it was a bright cold day in April, and the clock were striking thirteen.'
count = {}

for character in message:
    count.setdefault(character, 0)
    count[character] = count[character] + 1

# print(count)
# pprint.pprint(count)
print(pprint.pformat(count))
# '''
